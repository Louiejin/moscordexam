{"version":3,"sources":["components/content.js","components/source.js","components/topnews.js","components/allnews.js","components/page404.js","App.js","serviceWorker.js","index.js","utility.js"],"names":["Content","props","useState","page","setPage","item","setItem","onChangePageHandler","event","newPage","TablePagination","component","count","articles","length","rowsPerPageOptions","rowsPerPage","onChangePage","onChangeRowsPerPage","Grid","container","spacing","slice","map","aritcle","idx","key","xs","md","lg","Card","CardMedia","image","urlToImage","CardContent","Typography","gutterBottom","variant","align","title","color","dateFormat","publishedAt","excerptCleaner","content","CardActions","className","Link","href","url","totalArticles","ItemListLink","to","text","itemLinkClickHandler","isSeleted","index","linkRedirect","forwardRef","itemProps","ref","articletitle","ListItem","button","selected","onClick","ListItemText","primary","Source","setState","currentIndex","state","dataSources","headers","axiosConfig","auth","axios","method","then","res","data","sources","catch","err","console","error","this","Drawer","open","Skeleton","animation","indexOf","location","match","path","id","List","redirectLinkParam","name","params","React","Component","TopNews","getData","resArticles","updating","status","prevProps","prevState","snapshot","optionDiv","Container","maxWidth","CircularProgress","size","thickness","AppBar","Toolbar","Icon","Web","source","totalResults","Modal","aria-labelledby","aria-describedby","AllNews","styles","makeStyles","root","textAlign","Page404","classes","defaults","baseURL","App","exact","render","Boolean","window","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","date","Date","toDateString","excerpt","replace","username","password","basicAuth"],"mappings":"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","file":"static/js/main.24e3ebbc.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport {Typography,Grid, Card, \r\n        CardMedia, CardContent, CardActions, Link, TablePagination } from \"@material-ui/core\";\r\nimport { excerptCleaner, dateFormat } from \"../utility\";\r\n\r\nexport default function Content(props){\r\n    const [page, setPage] = useState(0);\r\n    const [item, setItem] = useState(10)\r\n\r\n    const onChangePageHandler = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const onChangePageItemHandler = (event, newPage) => {\r\n        setItem(newPage);\r\n    };\r\n\r\n\r\n    return(\r\n        <div>\r\n            <TablePagination \r\n                component='div'\r\n                count={props.articles.length}\r\n                rowsPerPageOptions={[]}\r\n                rowsPerPage={item}\r\n                page={page}\r\n                onChangePage={onChangePageHandler}\r\n                onChangeRowsPerPage={onChangePageItemHandler}\r\n            />\r\n            <Grid container spacing={3} >\r\n                {props.articles.slice(page*item, page*item+item).map((aritcle, idx)=>{\r\n                    return(\r\n                        <Grid item key={idx} xs={12} md={4} lg={4}>\r\n                            <Card>\r\n                                <CardMedia\r\n                                    component=\"img\"\r\n                                    image={aritcle.urlToImage}\r\n                                />\r\n                                <CardContent>\r\n                                    <Typography gutterBottom variant=\"h5\" component=\"h6\" align=\"left\">\r\n                                    {aritcle.title}\r\n                                    </Typography>\r\n                                    <Typography gutterBottom variant=\"subtitle2\" color=\"textSecondary\" align=\"left\">\r\n                                        {dateFormat(aritcle.publishedAt)}\r\n                                    </Typography>\r\n                                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\" align=\"left\">\r\n                                        { excerptCleaner(aritcle.content)}\r\n                                    </Typography>\r\n                                </CardContent>\r\n                                <CardActions className=\"newsCardAction\">\r\n                                    <Link href={aritcle.url}>\r\n                                        Read More\r\n                                    </Link>\r\n                                </CardActions>\r\n                            </Card>\r\n                        </Grid>\r\n                    )\r\n                })}\r\n            </Grid>\r\n            <TablePagination \r\n                component='div'\r\n                count={props.totalArticles}\r\n                rowsPerPageOptions={[]}\r\n                rowsPerPage={item}\r\n                page={page}\r\n                onChangePage={onChangePageHandler}\r\n            />\r\n        </div>\r\n    )\r\n}","import React,{forwardRef} from \"react\";\r\nimport { Drawer,List,ListItem,ListItemText } from '@material-ui/core';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport { Skeleton } from '@material-ui/lab';\r\nimport { axiosConfig,basicAuth } from \"../utility\";\r\nimport axios from \"axios\";\r\n\r\nconst ItemListLink=(props)=>{\r\n    let {to, text, itemLinkClickHandler, isSeleted, index} = props\r\n    const linkRedirect = forwardRef((itemProps, ref) => {\r\n        return(<Link to={to} ref={ref} {...itemProps} articletitle={text} />)\r\n    });\r\n\r\n    return(\r\n        <ListItem\r\n            button \r\n            component={linkRedirect}\r\n            selected={isSeleted}\r\n            onClick={event=>itemLinkClickHandler(event, index)}\r\n            >\r\n            <ListItemText primary={text}></ListItemText>\r\n        </ListItem>\r\n    )\r\n}\r\n\r\nexport default class Source extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            dataSources:[],\r\n            currentIndex:0\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        let {headers,auth} = axiosConfig\r\n\r\n        axios({\r\n            url: '/source',\r\n            method: 'get',\r\n            headers,\r\n            auth\r\n        }).then(res=>{\r\n            this.setState({dataSources:res.data.sources});\r\n        }).catch(err=>{\r\n            console.error(err);\r\n        });\r\n    }\r\n\r\n    itemLinkClickHandler=(event, idx)=>{\r\n        this.setState({currentIndex:idx})\r\n    }\r\n\r\n    render(){\r\n        let { dataSources } = this.state;\r\n        if(dataSources.length===0){\r\n            return(\r\n                <Drawer\r\n                open\r\n                variant=\"permanent\"\r\n                className=\"sideNav\"\r\n                >\r\n                    <Skeleton animation=\"wave\" />\r\n                    <Skeleton animation=\"wave\" />\r\n                    <Skeleton animation=\"wave\" />\r\n                </Drawer>\r\n            )\r\n        }\r\n\r\n        if(['/','/top','/all'].indexOf(this.props.location.match.path)!==-1){\r\n            return(<Redirect to={`/top/${dataSources[0].id}`}/>)\r\n        }\r\n\r\n        return(\r\n            <Drawer\r\n                open\r\n                variant=\"permanent\"\r\n                className=\"sideNav\"\r\n            >\r\n                <List>\r\n                    {dataSources.map((item, idx)=>{\r\n                        \r\n                        let redirectLinkParam = `/top/${item.id}`\r\n                        return(\r\n                            <ItemListLink \r\n                                to={redirectLinkParam} \r\n                                index={idx} \r\n                                text={item.name} \r\n                                key={item.id}\r\n                                isSeleted={item.id === this.props.location.match.params.id}\r\n                                itemLinkClickHandler={this.itemLinkClickHandler}>\r\n                            </ItemListLink>)\r\n                    })}\r\n                </List>\r\n            </Drawer>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport { Container,Typography, Link, CircularProgress, AppBar, Toolbar, Icon, Modal} from \"@material-ui/core\";\r\nimport { Web } from \"@material-ui/icons\";\r\nimport axios from \"axios\";\r\nimport Content from \"./content\";\r\nimport Source from \"./source\";\r\nimport { axiosConfig,basicAuth } from \"../utility\";\r\n\r\n\r\n\r\nexport default class TopNews extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            resArticles:{\r\n                articles:[],\r\n                status:''\r\n            },\r\n            id:'',\r\n            updating:false\r\n        }\r\n    }\r\n\r\n    getData=(id)=>{\r\n        let {headers,auth} = axiosConfig\r\n        axios({\r\n            url:'/topnews/'+id,\r\n            method: 'get',\r\n            headers,\r\n            auth\r\n        }).then(res=>{\r\n            this.setState({\r\n                resArticles:res.data,\r\n                updating:false\r\n            })\r\n        }).catch(err=>{\r\n            this.setState({\r\n                resArticles:{...this.state.resArticles,status:'fail'},\r\n            })\r\n        });\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getData(this.props.match.params.id)\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot){\r\n        if(this.props !== prevProps){\r\n            if(this.state.resArticles.articles.length !==0){\r\n                this.setState({updating:true});\r\n            }\r\n            this.getData(this.props.match.params.id)\r\n        }\r\n    }\r\n\r\n    render(){\r\n        let { resArticles, updating } = this.state;\r\n        let optionDiv;\r\n\r\n        if(resArticles.status === 'ok' || resArticles.status === 'fail'){\r\n            optionDiv=(<Container maxWidth=\"lg\">\r\n                <Typography variant=\"h1\" component=\"h2\">No Articles Found</Typography>\r\n                </Container>)\r\n        }else{\r\n            optionDiv=<Container maxWidth=\"lg\"><CircularProgress size={150} thickness={2}/></Container>\r\n        }\r\n        \r\n\r\n        return(\r\n            <div className='App'>\r\n                <AppBar className=\"headerbar\">\r\n                    <Toolbar variant=\"dense\">\r\n                        <Icon>\r\n                            <Web/>\r\n                        </Icon>\r\n                        <Typography variant=\"h6\" component=\"h1\" color=\"inherit\">\r\n                            News HeadLines\r\n                        </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <div className='main'>\r\n                    <Source location={this.props}/>\r\n                    {}\r\n                    {resArticles.articles.length === 0 ?(\r\n                            <div className='content progress'>\r\n                               {optionDiv}\r\n                            </div>\r\n                        ):(\r\n                            <Container maxWidth=\"lg\">\r\n                                <Typography gutterBottom variant=\"h1\" component=\"h1\">Top HeadLines on {resArticles.articles[0].source.name}</Typography>\r\n                                <Typography variant=\"subtitle2\" gutterBottom align='right'>\r\n                                    <Link href={`/all/${this.props.match.params.id}`}>All {resArticles.articles[0].source.name} News</Link>\r\n                                </Typography>\r\n                                <Content articles={resArticles.articles} totalArticles={resArticles.totalResults}></Content>\r\n                            </Container>\r\n                        )\r\n                    }\r\n                    \r\n                </div>\r\n                <Modal\r\n                    aria-labelledby=\"simple-modal-title\"\r\n                    aria-describedby=\"simple-modal-description\"\r\n                    open={updating}\r\n                    className=\"updateModal\"\r\n                >\r\n                    <div className='content progress'>\r\n                        <CircularProgress size={150} thickness={2}/>\r\n                    </div>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n} ","import React from \"react\";\r\nimport { Container,Typography, CircularProgress, AppBar, Toolbar,Icon } from \"@material-ui/core\";\r\nimport { Web } from \"@material-ui/icons\";\r\nimport { axiosConfig,basicAuth } from \"../utility\";\r\nimport axios from \"axios\";\r\nimport Content from \"./content\";\r\nimport Source from \"./source\";\r\n\r\nexport default class AllNews extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            resArticles:{\r\n                articles:[],\r\n                status:''\r\n            }\r\n        }\r\n    }\r\n\r\n    getData=(id)=>{\r\n        let {headers,auth} = axiosConfig\r\n        axios({\r\n            url:'/all/'+id,\r\n            method: 'get',\r\n            headers,\r\n            auth\r\n        }).then(res=>{\r\n            this.setState({\r\n                resArticles:res.data,\r\n                updating:false\r\n            })\r\n        }).catch(err=>{\r\n            this.setState({\r\n                resArticles:{...this.state.resArticles,status:'fail'},\r\n            })\r\n        });\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getData(this.props.match.params.id)\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        return(<Source location={this.props}/>)\r\n    }\r\n\r\n    render(){\r\n        let { resArticles } = this.state;\r\n        let optionDiv;\r\n\r\n        if(resArticles.status === 'ok' || resArticles.status === 'fail'){\r\n            optionDiv=(<Container maxWidth=\"lg\">\r\n                <Typography variant=\"h1\" component=\"h2\">No Articles Found</Typography>\r\n                </Container>)\r\n        }else{\r\n            optionDiv=<Container maxWidth=\"lg\"><CircularProgress size={150} thickness={2}/></Container>\r\n        }\r\n        return(\r\n            <div className='App'>\r\n            <AppBar className=\"headerbar\">\r\n                <Toolbar variant=\"dense\">\r\n                    <Icon>\r\n                        <Web/>\r\n                    </Icon>\r\n                    <Typography variant=\"h6\" component=\"h1\" color=\"inherit\">\r\n                        News HeadLines\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <div className='main'>\r\n                <Source location={this.props}/>\r\n                {resArticles.articles.length === 0 ?(\r\n                    <div className='content progress'>\r\n                        {optionDiv}\r\n                    </div>\r\n                ):(\r\n                    <Container maxWidth=\"lg\">\r\n                        <Typography gutterBottom variant=\"h1\" component=\"h1\">All HeadLines on {resArticles.articles[0].source.name}</Typography>\r\n                        <Content articles={resArticles.articles} totalArticles={resArticles.totalResults}></Content>\r\n                    </Container>\r\n                )}    \r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n} ","import React from \"react\";\r\nimport { Link,Container,Typography } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst styles = makeStyles({\r\n    root:{\r\n        textAlign:'center'\r\n    }\r\n})\r\n\r\nexport default function Page404(){\r\n    const classes = styles();\r\n    return (\r\n        <div className='main'>\r\n                <Container maxWidth=\"lg\" >\r\n                    <Typography gutterBottom variant=\"h1\" className={classes.root} component=\"h1\">404</Typography>\r\n                    <Typography variant=\"subtitle2\" gutterBottom className={classes.root}>\r\n                        Page Not Found \r\n                    </Typography>\r\n                    <Typography variant=\"subtitle2\" gutterBottom className={classes.root}>\r\n                        <Link href='/'>Home</Link>\r\n                    </Typography>\r\n                </Container>              \r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport axios from \"axios\";\nimport { BrowserRouter,Route,Switch } from \"react-router-dom\";\n\n//compnents import\nimport TopNews from \"./components/topnews\";\nimport AllNews from \"./components/allnews\";\nimport Page404 from \"./components/page404\";\n\naxios.defaults.baseURL = 'http://localhost:3001';\n\nfunction App() {\n  \n  return (\n      <BrowserRouter>\n        <Switch>\n          <Route exact path={['/top/:id','/','/top','/all']} render={(props)=>(<TopNews {...props}/>)}/>\n          <Route exact path='/all/:id' component={AllNews} />\n          <Route exact path='*' component={Page404}/>\n        </Switch>\n      </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\r\nlet axiosConfig ={\r\n    headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n    },\r\n    auth: {\r\n        username: 'news',\r\n        password: 'newsecrect'\r\n    }\r\n}\r\n\r\nlet basicAuth ={ auth: {\r\n        username: 'news',\r\n        password: 'newsecrect'\r\n    }\r\n}\r\n\r\nlet dateFormat = (date)=>{\r\n    if(date===null){\r\n        return date;\r\n    }\r\n    return new Date(date).toDateString();\r\n}\r\n\r\nlet excerptCleaner =(excerpt)=>{\r\n    if(excerpt===null){\r\n        return excerpt;\r\n    }\r\n    return excerpt.replace(/\\[\\+\\d+\\s\\w+]/g,'');\r\n}\r\n\r\nmodule.exports = {\r\n    dateFormat:dateFormat,\r\n    excerptCleaner:excerptCleaner,\r\n    axiosConfig:axiosConfig,\r\n    basicAuth:basicAuth\r\n}"],"sourceRoot":""}